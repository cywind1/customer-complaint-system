// useGetComplaintsQuery = custom hook provided by the complaintsApiSlice slice generated by the Redux Toolkit's createApi function.
// used to fetch a list of complaints from the server using a GET request
// returns an object containing the data property which holds the response data from the server.
// also returns the isLoading, isSuccess, and isError boolean flags that indicate the current state of the request, as well as the error object which contains any error information if the request fails

import { useGetComplaintsQuery } from "./complaintsApiSlice";
import Complaint from "./Complaint";
import useAuth from "../../hooks/useAuth";
import PulseLoader from "react-spinners/PulseLoader";
import useTitle from "../../hooks/useTitle";

// define the ComplaintsList component
const ComplaintsList = () => {
  useTitle("Customer Complaints System: Complaints List");
  // get the authenticated user's information using the useAuth hook
  const { username, isManager, isAdmin } = useAuth();
  const {
    data: complaints, // destructure the data property from the useGetComplaintsQuery hook
    isLoading,
    isSuccess,
    isError,
    error,
  } = useGetComplaintsQuery("complaintsList", {
    pollingInterval: 60000,
    refetchOnFocus: true,
    refetchOnMountOrArgChange: true,
  });

  // declare a content variable to hold the component's content
  let content;

  // 12.13 PulseLoader, replace Loading...
  if (isLoading) content = <PulseLoader color={"#FFF"} />;
  // if (isLoading) content = <p>Loading...</p>;
  // if the complaints are still loading, display a loading message
  if (isError) {
    // if an error occurred while fetching the complaints
    content = <p className="errmsg">{error?.data?.message}</p>; // display an error message
  }

  // // if ids has a length greater than 0, the ids.map method is called to iterate over the ids array and create a <Complaint> component for each complaint id. The key prop is set to the complaintId to ensure that each <Complaint> component has a unique identifier.
  // // If ids is empty (has a length of 0) or null or undefined, the tableContent variable is set to null
  // const tableContent = ids?.length
  //   ? ids.map((complaintId) => <Complaint key={complaintId} complaintId={complaintId} />)
  //   : null;

  // if the complaints were successfully fetched
  if (isSuccess) {
    // destructure the ids and entities properties from the complaints object
    const { ids, entities } = complaints;

    let filteredIds; // declare a variable to hold the filtered complaint ids
    // if the authenticated user is a manager or admin
    if (isManager || isAdmin) {
      filteredIds = [...ids]; // show all complaints
    } else {
      // otherwise, if the user is not a manager or admin
      filteredIds = ids.filter(
        (complaintId) => entities[complaintId].username === username // filter the complaints by the authenticated user's username, one can only see his complaints, not others
      );
    }

    const tableContent =
      ids?.length &&
      // map over the filtered complaint ids and create a Complaint component for each one
      filteredIds.map((complaintId) => (
        <Complaint key={complaintId} complaintId={complaintId} />
      ));
    content = // set the content variable to hold the table that displays the complaints
      (
        <table className="table table--complaints">
          <thead className="table__thead">
            <tr>
              <th scope="col" className="table__th complaint__status">
                Username
              </th>
              <th scope="col" className="table__th complaint__created">
                Created
              </th>
              <th scope="col" className="table__th complaint__updated">
                Updated
              </th>
              <th scope="col" className="table__th complaint__title">
                Title
              </th>
              <th scope="col" className="table__th complaint__username">
                Submitted by
              </th>
              <th scope="col" className="table__th complaint__edit">
                Edit
              </th>
            </tr>
          </thead>
          <tbody>{tableContent}</tbody>
        </table>
      );
  }

  return content; // return the content variable
};
export default ComplaintsList;
